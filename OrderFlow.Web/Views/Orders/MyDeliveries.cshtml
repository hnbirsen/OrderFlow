@using OrderFlow.Application.DTOs
@model IEnumerable<OrderDto>

@{
	var orders = Model.ToArray();
}

<main class="main">
	<header class="toolbar">
		<div class="title-area">
			<h1 class="title">Orders</h1>
			<div class="filters">
				<div class="field">
					<button id="statusBtn" class="select" data-menu="statusMenu" type="button">
						<span id="statusLabel">Any status</span>
						<span class="caret" aria-hidden="true">‚ñæ</span>
					</button>
					<div id="statusMenu" class="menu" role="menu" aria-hidden="true">
						<button data-value="all" class="menu-item" role="menuitem">Any status</button>
						<button data-value="New" class="menu-item" role="menuitem">New</button>
						<button data-value="Processing" class="menu-item" role="menuitem">Processing</button>
						<button data-value="Sent" class="menu-item" role="menuitem">Sent</button>
						<button data-value="Completed" class="menu-item" role="menuitem">Completed</button>
						<button data-value="Cancelled" class="menu-item" role="menuitem">Cancelled</button>
						<button data-value="Refunded" class="menu-item" role="menuitem">Refunded</button>
					</div>
				</div>

				<div class="icon-group" role="group" aria-label="Quick actions">
				  <button class="icon-btn" title="Refresh" type="button" onclick="location.reload();">‚ü≥</button>
				</div>
			</div>
		</div>

		<div class="right-actions">
			<div class="user">
				<div class="avatar" style="--bg:#FDE68A">K</div>
				<div class="user-info">
					<div class="user-name">Kristina Evans</div>
					<div class="user-email">kris.evans@email.com</div>
				</div>
			</div>
		</div>
	</header>

	<section class="content">
		<div class="orders">
			<div class="orders-head">
				<div class="col col-check">
					<input id="masterCheck" type="checkbox" />
				</div>
				<div class="col">Order</div>
				<div class="col">Description</div>
				<div class="col">Status</div>
				<div class="col">Items</div>
				<div class="col">Date</div>
				<div class="col col-kebab" aria-hidden="true">‚ãØ</div>
			</div>

			<div id="ordersBody" class="orders-body" role="list"></div>
		</div>
	</section>
</main>

<aside id="detail" class="detail">
	<div class="detail-head">
		<div>
			<div class="detail-order" id="detailOrder">Order ‚Äî</div>
			<div class="detail-meta"><span id="detailStatus" class="badge"></span><span id="detailDate" class="dim"></span></div>
		</div>
		<button class="icon-btn" id="closeDetail" title="Close" type="button">‚úï</button>
	</div>

	<div class="detail-customer">
		<div id="detailAvatar" class="avatar avatar-xl">?</div>
		<div class="detail-person">
			<div id="detailName" class="detail-name">‚Äî</div>
			<div class="detail-actions">
				<button class="icon-pill" title="Email" type="button">‚úâÔ∏è</button>
				<button class="icon-pill" title="Call" type="button">üìû</button>
				<button class="icon-pill" title="Chat" type="button">üí¨</button>
			</div>
		</div>
	</div>

	<div>
		<h3 class="section-title">Order items</h3>
		<ul id="detailItems" class="item-list"></ul>
	</div>

	<div class="detail-total">
		<div>Total</div>
		<div id="detailTotal" class="total-amount">$‚Äî</div>
	</div>

    <div class="detail-cta">
		<button class="btn btn-dark" hidden id="detail-ship" data-new-status="2" type="button">Update as Shipped</button>
		<button class="btn btn-dark" hidden id="detail-process" data-new-status="1" type="button">Update as Processing</button>
		<button class="btn btn-dark" hidden id="detail-completed" data-new-status="3" type="button">Update as Completed</button>
		<button class="btn btn-dark" hidden id="detail-cancel" data-new-status="4" type="button">Cancel Order</button>
		<button class="btn btn-ghost" hidden id="detail-refund" data-new-status="5" type="button">Refund ‚Ü∫</button>
		<button class="btn btn-dark" hidden id="detail-track" type="button">Track</button>
    </div>
</aside>

<script>
    window.demoOrders = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
        orders ?? System.Linq.Enumerable.Empty<OrderFlow.Application.DTOs.OrderDto>(),
        new System.Text.Json.JsonSerializerOptions {
            PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase,
            Converters = { new System.Text.Json.Serialization.JsonStringEnumConverter() }
        }
    ))
</script>

@section Scripts {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			if (typeof renderOrders === 'function' && window.demoOrders) {
				renderOrders(window.demoOrders);
			}
		});
	</script>
}